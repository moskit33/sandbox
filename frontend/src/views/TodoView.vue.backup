<template>
  <main class="todo-container">
    <h1>Список задач</h1>

    <div v-if="todosStore.isLoading" class="loading">
      Загрузка данных... Пожалуйста, подождите.
    </div>

    <div v-if="todosStore.error" class="error">
      {{ todosStore.error }}
    </div>

    <form @submit.prevent="addTodo" class="todo-form">
      <h2>Добавить новую задачу</h2>
      <div class="form-group">
        <label for="title">Название</label>
        <input
          id="title"
          v-model="newTodo.title"
          type="text"
          placeholder="Введите название задачи"
          required
        />
      </div>
      <div class="form-group">
        <label for="description">Описание</label>
        <textarea
          id="description"
          v-model="newTodo.description"
          placeholder="Введите описание задачи"
          required
        ></textarea>
      </div>
      <button type="submit" :disabled="todosStore.isLoading">
        {{ todosStore.isLoading ? "Добавление..." : "Добавить задачу" }}
      </button>
    </form>

    <div v-if="todosStore.todos.length === 0" class="no-todos">
      Задач пока нет. Добавьте первую задачу выше!
    </div>

    <div v-else class="todos-list">
      <h2>Ваши задачи</h2>
      <div
        v-for="todo in todosStore.todos"
        :key="todo.id"
        class="todo-item"
        :class="{ completed: todo.completed }"
      >
        <div class="todo-content">
          <h3>{{ todo.title }}</h3>
          <p>{{ todo.description }}</p>
          <div class="todo-meta">
            <span
              >Создано: {{ new Date(todo.createdAt).toLocaleString() }}</span
            >
            <span
              >Обновлено: {{ new Date(todo.updatedAt).toLocaleString() }}</span
            >
          </div>
        </div>
        <div class="todo-actions">
          <button
            @click="toggleTodoStatus(todo.id)"
            :class="[todo.completed ? 'btn-incomplete' : 'btn-complete']"
          >
            {{
              todo.completed ? "Вернуть в работу" : "Отметить как выполненную"
            }}
          </button>
          <button @click="deleteTodo(todo.id)" class="btn-delete">
            Удалить
          </button>
        </div>
      </div>
    </div>
  </main>
</template>

<script setup lang="ts">
import { onMounted, reactive } from "vue";
import { useTodosStore } from "../stores/todos";

const todosStore = useTodosStore();

const newTodo = reactive({
  title: "",
  description: "",
});

async function addTodo() {
  if (newTodo.title && newTodo.description) {
    await todosStore.createTodo({
      title: newTodo.title,
      description: newTodo.description,
    });

    // Reset form after submission
    newTodo.title = "";
    newTodo.description = "";
  }
}

async function toggleTodoStatus(id: number) {
  await todosStore.toggleTodoStatus(id);
}

async function deleteTodo(id: number) {
  if (confirm("Вы уверены, что хотите удалить эту задачу?")) {
    await todosStore.deleteTodo(id);
  }
}

onMounted(() => {
  todosStore.fetchTodos();
});
</script>

<style scoped>
.todo-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.loading,
.error,
.no-todos {
  padding: 1rem;
  margin: 1rem 0;
  border-radius: var(--border-radius);
  text-align: center;
}

.loading {
  background-color: #f2f2f2;
}

.error {
  background-color: #ffebee;
  color: #c62828;
}

.todo-form {
  background-color: #fff;
  padding: 1.5rem;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
}

input,
textarea {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: var(--border-radius);
  font-family: inherit;
  font-size: 1rem;
}

textarea {
  min-height: 100px;
  resize: vertical;
}

button {
  background-color: var(--color-primary);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: var(--color-secondary);
}

button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.todos-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.todo-item {
  background-color: #fff;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.todo-item.completed {
  border-left: 4px solid var(--color-primary);
}

.todo-item.completed h3 {
  text-decoration: line-through;
  color: #666;
}

.todo-content h3 {
  margin-bottom: 0.5rem;
}

.todo-meta {
  display: flex;
  justify-content: space-between;
  margin-top: 0.5rem;
  color: #666;
  font-size: 0.8rem;
}

.todo-actions {
  display: flex;
  gap: 0.5rem;
}

.btn-complete {
  background-color: var(--color-primary);
}

.btn-incomplete {
  background-color: #ff9800;
}

.btn-delete {
  background-color: #f44336;
}
</style> 